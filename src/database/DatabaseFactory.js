const DatabaseInterface = require('./DatabaseInterface');

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –°–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 */
class DatabaseFactory {
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param {string} type - –¢–∏–ø –ë–î ('sqlite' | 'firestore')
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @returns {DatabaseInterface} –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    static create(type = null, config = {}) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –∏–∑ environment –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        const dbType = type || process.env.DB_TYPE || (process.env.USE_FIRESTORE === 'true' ? 'firestore' : 'sqlite');
        
        console.log(`üóÑÔ∏è  Initializing ${dbType.toUpperCase()} database...`);
        
        switch (dbType.toLowerCase()) {
            case 'sqlite':
                return DatabaseFactory._createSQLite(config);
                
            case 'firestore':
                return DatabaseFactory._createFirestore(config);
                
            default:
                console.warn(`‚ö†Ô∏è  Unknown database type: ${dbType}, falling back to SQLite`);
                return DatabaseFactory._createSQLite(config);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SQLite
     * @returns {SQLiteDatabase} –≠–∫–∑–µ–º–ø–ª—è—Ä SQLite –ë–î
     * @private
     */
    static _createSQLite(config) {
        try {
            const SQLiteDatabase = require('./SQLiteDatabase');
            const instance = new SQLiteDatabase(config);
            console.log('‚úÖ SQLite database initialized');
            return instance;
        } catch (error) {
            console.error('‚ùå Failed to initialize SQLite database:', error.message);
            throw new Error(`SQLite initialization failed: ${error.message}`);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å Firestore –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firestore
     * @returns {FirestoreDatabase} –≠–∫–∑–µ–º–ø–ª—è—Ä Firestore –ë–î
     * @private
     */
    static _createFirestore(config) {
        try {
            const FirestoreDatabase = require('./FirestoreDatabase');
            const instance = new FirestoreDatabase(config);
            console.log('‚úÖ Firestore database initialized');
            return instance;
        } catch (error) {
            console.error('‚ùå Failed to initialize Firestore database:', error.message);
            throw new Error(`Firestore initialization failed: ${error.message}`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –ë–î
     * @returns {Array<string>} –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ë–î
     */
    static getSupportedTypes() {
        return ['sqlite', 'firestore'];
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –ë–î
     * @param {string} type - –¢–∏–ø –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ç–∏–ø –ë–î
     */
    static isTypeSupported(type) {
        return DatabaseFactory.getSupportedTypes().includes(type.toLowerCase());
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –ë–î –¥–ª—è —Å—Ä–µ–¥—ã
     * @param {string} environment - –°—Ä–µ–¥–∞ (development/production)
     * @returns {string} –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –ë–î
     */
    static getRecommendedType(environment = 'development') {
        const recommendations = {
            'development': 'sqlite',
            'test': 'sqlite',
            'staging': 'firestore',
            'production': 'firestore'
        };
        
        return recommendations[environment] || 'sqlite';
    }
}

module.exports = DatabaseFactory;