const DatabaseInterface = require('./DatabaseInterface');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

/**
 * SQLite —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è DatabaseInterface
 * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º database.js —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º –∫ –µ–¥–∏–Ω–æ–º—É API
 */
class SQLiteDatabase extends DatabaseInterface {
    
    constructor(config = {}) {
        super();
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ database.js
        const dbModule = require('../../database');
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ database.js
        this.dbModule = dbModule;
        
        console.log('üìÑ SQLite database wrapper initialized');
    }
    
    // ==================== –ì–†–£–ü–ü–´ ====================
    
    async addGroup(chatId, title) {
        return this.dbModule.addGroup(chatId, title);
    }
    
    // ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ====================
    
    async addUser(userId, username, firstName, lastName) {
        return this.dbModule.addUser(userId, username, firstName, lastName);
    }
    
    async getAllUsersWithRoles() {
        return this.dbModule.getAllUsersWithRoles();
    }
    
    async updateUserRole(userId, role) {
        return this.dbModule.updateUserRole(userId, role);
    }
    
    async getUserRole(userId) {
        return this.dbModule.getUserRole(userId);
    }
    
    async getUserRating() {
        return this.dbModule.getUserRating();
    }
    
    // ==================== –ó–ê–î–ê–ß–ò ====================
    
    async addTask(title, description, assigneeUsername, deadline, chatId, createdByUserId, estimatedTime = 0) {
        return this.dbModule.addTask(title, description, assigneeUsername, deadline, chatId, createdByUserId, estimatedTime);
    }
    
    async getAllTasks(filter = {}) {
        return this.dbModule.getAllTasks(filter);
    }
    
    async getTaskStats() {
        return this.dbModule.getTaskStats();
    }
    
    async completeTask(taskId, userId = null) {
        return this.dbModule.completeTask(taskId, userId);
    }
    
    async deleteTask(taskId) {
        return this.dbModule.deleteTask(taskId);
    }
    
    async updateTask(taskId, title, description, deadline) {
        return this.dbModule.updateTask(taskId, title, description, deadline);
    }
    
    async submitForReview(taskId, userId) {
        return this.dbModule.submitForReview(taskId, userId);
    }
    
    async approveTask(taskId, reviewerId, comment = '') {
        return this.dbModule.approveTask(taskId, reviewerId, comment);
    }
    
    async requestRevision(taskId, reviewerId, comment) {
        return this.dbModule.requestRevision(taskId, reviewerId, comment);
    }
    
    async returnToWork(taskId) {
        return this.dbModule.returnToWork(taskId);
    }
    
    async getDetailedTaskStats() {
        return this.dbModule.getDetailedTaskStats();
    }
    
    async getTaskPerformanceMetrics() {
        return this.dbModule.getTaskPerformanceMetrics();
    }
    
    // ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    async getAllSettings() {
        return this.dbModule.getAllSettings();
    }
    
    async setSetting(key, value, description = '') {
        return this.dbModule.setSetting(key, value, description);
    }
    
    async getSetting(key) {
        return this.dbModule.getSetting(key);
    }
    
    // ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ SQLite –±–∞–∑–µ (–¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
     * @returns {Object} –û–±—ä–µ–∫—Ç database.js –º–æ–¥—É–ª—è
     */
    getRawDatabase() {
        return this.dbModule;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
     */
    getConnectionInfo() {
        return {
            type: 'sqlite',
            file: 'tasks.db',
            driver: 'sqlite3',
            status: 'connected'
        };
    }
}

module.exports = SQLiteDatabase;