/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –æ–±—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */

const App = {
    currentPage: 'dashboard',
    modules: {},
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Task Manager...');
        
        this.bindGlobalEvents();
        this.initializeModules();
        this.setupNavigation();
        this.loadInitialPage();
        
        console.log('‚úÖ Task Manager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    },
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    bindGlobalEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –æ–≤–µ—Ä–ª–µ—é –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                e.target.classList.remove('show');
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
        window.addEventListener('error', (e) => {
            console.error('JavaScript Error:', e.error);
            this.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'error');
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ unhandled promise rejections
        window.addEventListener('unhandledrejection', (e) => {
            console.error('Unhandled Promise Rejection:', e.reason);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', 'error');
        });
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    initializeModules() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.modules = {
            tasks: TasksModule,
            users: UsersModule,
            settings: SettingsModule
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
        Object.keys(this.modules).forEach(moduleName => {
            try {
                if (this.modules[moduleName].init) {
                    this.modules[moduleName].init();
                    console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ${moduleName}:`, error);
            }
        });
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation() {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –ø—É–Ω–∫—Ç–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const page = item.dataset.page;
                if (page) {
                    this.navigateTo(page);
                }
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        window.addEventListener('popstate', (e) => {
            const page = e.state?.page || 'dashboard';
            this.showPage(page, false);
        });
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadInitialPage() {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const urlParams = new URLSearchParams(window.location.search);
        const initialPage = urlParams.get('page') || 'dashboard';
        
        this.navigateTo(initialPage, false);
    },
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    navigateTo(page, updateHistory = true) {
        if (this.currentPage === page) return;
        
        this.showPage(page, updateHistory);
    },
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    showPage(page, updateHistory = true) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(p => {
            p.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const pageElement = document.getElementById(`${page}Page`);
        if (pageElement) {
            pageElement.classList.add('active');
        } else {
            console.error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        const navItem = document.querySelector(`[data-page=\"${page}\"]`);
        if (navItem) {
            navItem.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.updatePageTitle(page);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL
        if (updateHistory) {
            const url = new URL(window.location);
            url.searchParams.set('page', page);
            window.history.pushState({ page }, '', url);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.currentPage = page;
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.onPageChange(page);
    },
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    onPageChange(page) {
        switch (page) {
            case 'dashboard':
                this.loadDashboard();
                break;
            case 'tasks':
                if (this.modules.tasks.loadTasks) {
                    this.modules.tasks.loadTasks();
                }
                break;
            case 'analytics':
                this.loadAnalytics();
                break;
            case 'users':
                if (this.modules.users.loadUsers) {
                    this.modules.users.loadUsers();
                }
                break;
            case 'settings':
                if (this.modules.settings.loadSettings) {
                    this.modules.settings.loadSettings();
                }
                break;
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updatePageTitle(page) {
        const titles = {
            'dashboard': '–î–∞—à–±–æ—Ä–¥',
            'tasks': '–ó–∞–¥–∞—á–∏', 
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        };
        
        const pageTitle = document.querySelector('.page-title');
        if (pageTitle) {
            pageTitle.textContent = titles[page] || 'Task Manager';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.title = `${titles[page] || 'Task Manager'} - Task Manager`;
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
    async loadDashboard() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await StatsAPI.getBasic();
            this.updateDashboardStats(stats);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
            const tasks = await TasksAPI.getAll();
            this.updateRecentTasks(tasks.slice(0, 5));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞', 'error');
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
    updateDashboardStats(stats) {
        const elements = {
            'totalTasks': stats.total || 0,
            'pendingTasks': stats.pending || 0,
            'activeTasks': stats.in_progress || 0,
            'completedTasks': stats.completed || 0
        };
        
        Object.keys(elements).forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = elements[id];
            }
        });
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á
    updateRecentTasks(tasks) {
        const container = document.getElementById('recentTasksList');
        if (!container) return;
        
        if (tasks.length === 0) {
            container.innerHTML = '<p class="text-light">–ù–µ—Ç –∑–∞–¥–∞—á</p>';
            return;
        }
        
        container.innerHTML = tasks.map(task => `
            <div class="task-item-small">
                <div class="task-info">
                    <h4>${this.escapeHtml(task.title)}</h4>
                    <p class="task-assignee">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${this.escapeHtml(task.assignee || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}</p>
                </div>
                <span class="task-status ${this.getStatusClass(task.status)}">
                    ${this.getStatusText(task.status)}
                </span>
            </div>
        `).join('');
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    async loadAnalytics() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const detailed = await StatsAPI.getDetailed();
            this.renderDetailedStats(detailed);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const performance = await StatsAPI.getPerformance();
            this.renderPerformanceMetrics(performance);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'error');
        }
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    renderDetailedStats(stats) {
        const container = document.getElementById('detailedStats');
        if (!container || !stats) return;
        
        container.innerHTML = `
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">${stats.totalTasks || 0}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.completionRate || 0}%</div>
                    <div class="stat-label">–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.averageTime || 0}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—á)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.activeUsers || 0}</div>
                    <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
            </div>
        `;
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    renderPerformanceMetrics(metrics) {
        const container = document.getElementById('performanceMetrics');
        if (!container || !metrics) return;
        
        container.innerHTML = `
            <div class="metrics-list">
                ${metrics.map(metric => `
                    <div class="metric-item">
                        <div class="metric-name">${this.escapeHtml(metric.name)}</div>
                        <div class="metric-value">${metric.value}</div>
                        <div class="metric-trend ${metric.trend}">${metric.trend}</div>
                    </div>
                `).join('')}
            </div>
        `;
    },
    
    // –£—Ç–∏–ª–∏—Ç—ã
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    getStatusClass(status) {
        const classes = {
            'pending': 'pending',
            'in_progress': 'in-progress', 
            'review': 'review',
            'completed': 'completed',
            'revision': 'revision'
        };
        return classes[status] || 'pending';
    },
    
    getStatusText(status) {
        const texts = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'review': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'revision': '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
        };
        return texts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    },
    
    // UI —É—Ç–∏–ª–∏—Ç—ã
    closeAllModals() {
        document.querySelectorAll('.modal.show').forEach(modal => {
            modal.classList.remove('show');
        });
    },
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log(`[${type.toUpperCase()}] ${message}`);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            transition: all 0.3s ease;
        `;
        
        // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const colors = {
            'success': '#48bb78',
            'error': '#f56565',
            'warning': '#ed8936',
            'info': '#4299e1'
        };
        notification.style.backgroundColor = colors[type] || colors.info;
        
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    App.init();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º App –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.App = App;