/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏
 */

const UsersModule = {
    users: [],
    chatInfo: null,
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    init() {
        this.bindEvents();
        this.loadUsers();
        this.loadChatInfo();
    },
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const refreshBtn = document.getElementById('refreshUsersBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => this.refreshUsers());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ /start
        const startPollingBtn = document.getElementById('startPollingBtn');
        if (startPollingBtn) {
            startPollingBtn.addEventListener('click', () => this.startBotPolling());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const addUserBtn = document.getElementById('addUserBtn');
        if (addUserBtn) {
            addUserBtn.addEventListener('click', () => this.openAddUserModal());
        }
    },
    
    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
    rebindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling
        const startPollingBtn = document.getElementById('startPollingBtn');
        if (startPollingBtn) {
            startPollingBtn.removeEventListener('click', this.startBotPolling);
            startPollingBtn.addEventListener('click', () => this.startBotPolling());
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async loadUsers() {
        try {
            this.users = await UsersAPI.getAll();
            this.renderUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    async loadChatInfo() {
        try {
            this.chatInfo = await SettingsAPI.getChatInfo();
            this.updateChatInfoDisplay();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:', error);
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —á–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram
    async refreshUsers() {
        const refreshBtn = document.getElementById('refreshUsersBtn');
        if (refreshBtn) {
            refreshBtn.disabled = true;
            refreshBtn.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
        }
        
        try {
            const result = await UsersAPI.refresh();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if (result.total_chat_members) {
                this.updateChatStats(result.total_chat_members, result.users_in_db);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            this.users = result.users || [];
            this.renderUsers();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –Ω–∞–∑–æ–π–ª–∏–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            this.showNotification(`–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message, 'error');
        } finally {
            if (refreshBtn) {
                refreshBtn.disabled = false;
                refreshBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Telegram';
            }
        }
    },
    
    // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ /start
    async startBotPolling() {
        const startBtn = document.getElementById('startPollingBtn');
        if (startBtn) {
            startBtn.disabled = true;
            startBtn.textContent = '–ó–∞–ø—É—Å–∫...';
        }
        
        try {
            const result = await BotAPI.startPolling();
            
            if (result.success) {
                this.showNotification('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.', 'success');
                this.updatePollingStatus(true);
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message, 'error');
        } finally {
            if (startBtn) {
                startBtn.disabled = false;
                startBtn.textContent = '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞';
            }
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ polling
    updatePollingStatus(isActive) {
        const statusElement = document.getElementById('pollingStatus');
        if (statusElement) {
            statusElement.innerHTML = isActive 
                ? '<span class="text-success">üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω</span>'
                : '<span class="text-warning">üü° –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</span>';
        }
        
        const startBtn = document.getElementById('startPollingBtn');
        if (startBtn && isActive) {
            startBtn.style.display = 'none';
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    updateChatInfoDisplay() {
        const chatInfoElement = document.getElementById('chatInfo');
        if (chatInfoElement && this.chatInfo) {
            chatInfoElement.innerHTML = `
                <div class="chat-info-header">
                    <div class="chat-avatar">üí¨</div>
                    <div class="chat-details">
                        <h3>${this.escapeHtml(this.chatInfo.chat.title)}</h3>
                        <p class="text-light">ID: ${this.chatInfo.chat.id} ‚Ä¢ ${this.getChatTypeText(this.chatInfo.chat.type)}</p>
                    </div>
                </div>
            `;
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞
    updateChatStats(totalMembers, usersInDb) {
        const statsElement = document.getElementById('chatStats');
        if (statsElement) {
            statsElement.innerHTML = `
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-number">${totalMembers}</span>
                        <span class="stat-label">–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">${usersInDb}</span>
                        <span class="stat-label">–í —Å–∏—Å—Ç–µ–º–µ</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">${Math.round((usersInDb / totalMembers) * 100)}%</span>
                        <span class="stat-label">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
                    </div>
                </div>
            `;
        }
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    renderUsers() {
        const container = document.getElementById('usersList');
        if (!container) return;
        
        if (this.users.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üë•</div>
                    <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p class="text-light">
                        ${this.chatInfo 
                            ? `–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ "${this.chatInfo.chat.title}" –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.` 
                            : '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏".'
                        }
                    </p>
                    
                    <div class="bot-info">
                        <div id="pollingStatus">
                            <span class="text-warning">üü° –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</span>
                        </div>
                        <p class="text-light">
                            –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É /start –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
                        </p>
                        <div class="instructions">
                            <p class="text-light"><strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong></p>
                            <ol class="text-light">
                                <li>–ù–∞–π—Ç–∏ –±–æ—Ç–∞ –≤ Telegram</li>
                                <li>–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start</li>
                                <li>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</li>
                            </ol>
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <button id="startPollingBtn" class="btn btn-success" onclick="UsersModule.startBotPolling()">
                            <span>ü§ñ</span> –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
                        </button>
                        <button class="btn btn-primary" onclick="UsersModule.refreshUsers()">
                            <span>üîÑ</span> –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
                        </button>
                    </div>
                </div>
            `;
            
            // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –ø—É—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            setTimeout(() => this.rebindEvents(), 100);
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        const groupedUsers = this.groupUsersByRole();
        
        container.innerHTML = `
            <div class="users-header">
                <div class="users-summary">
                    <p class="text-light">–ù–∞–π–¥–µ–Ω–æ ${this.users.length} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ "${this.chatInfo?.chat?.title || 'Telegram'}"</p>
                </div>
                
                <div class="bot-controls">
                    <div id="pollingStatus" class="polling-status">
                        <span class="text-success">üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω</span>
                    </div>
                    <div class="action-buttons">
                        <button class="btn btn-primary btn-sm" onclick="UsersModule.refreshUsers()">
                            <span>üîÑ</span> –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
                        </button>
                    </div>
                </div>
            </div>
            
            ${Object.keys(groupedUsers).map(role => `
                <div class="role-section">
                    <h4 class="role-header">${this.getRoleText(role)} (${groupedUsers[role].length})</h4>
                    <div class="users-grid">
                        ${groupedUsers[role].map(user => this.renderUserCard(user)).join('')}
                    </div>
                </div>
            `).join('')}
        `;
        
        // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
        this.rebindEvents();
    },
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    groupUsersByRole() {
        return this.users.reduce((groups, user) => {
            const role = user.role || 'executor';
            if (!groups[role]) {
                groups[role] = [];
            }
            groups[role].push(user);
            return groups;
        }, {});
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    renderUserCard(user) {
        const roleClass = this.getRoleClass(user.role);
        const roleText = this.getRoleText(user.role);
        const isFromChat = user.is_from_configured_chat;
        
        return `
            <div class="user-card ${isFromChat ? 'from-chat' : ''}" data-user-id="${user.user_id}">
                <div class="user-avatar">
                    ${this.getUserInitials(user.first_name, user.last_name)}
                    ${isFromChat ? '<span class="chat-badge">üí¨</span>' : ''}
                </div>
                
                <div class="user-info">
                    <div class="user-name">
                        ${this.escapeHtml(user.first_name || '')} ${this.escapeHtml(user.last_name || '')}
                        ${isFromChat ? '<span class="verified-badge">‚úì</span>' : ''}
                    </div>
                    <div class="user-meta">
                        <span class="user-username">@${this.escapeHtml(user.username || 'no_username')}</span>
                        <span class="user-role ${roleClass}">${roleText}</span>
                    </div>
                    <div class="user-stats">
                        <div class="stat-item">
                            <span class="stat-label">–û—á–∫–∏:</span>
                            <span class="stat-value">${user.points || 0}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">–ë–∞–ª–∞–Ω—Å:</span>
                            <span class="stat-value">${user.balance || 0}</span>
                        </div>
                    </div>
                    ${isFromChat ? `
                        <div class="user-source">
                            <span class="source-badge">–£—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ "${this.chatInfo?.chat?.title || 'Telegram'}"</span>
                        </div>
                    ` : ''}
                </div>
                
                <div class="user-actions">
                    ${this.renderUserActions(user)}
                </div>
            </div>
        `;
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    renderUserActions(user) {
        const actions = [];
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
        if (user.role !== 'admin') {
            actions.push(`
                <select class="form-select" onchange="UsersModule.updateUserRole('${user.user_id}', this.value)">
                    <option value="user" ${user.role === 'user' ? 'selected' : ''}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                    <option value="moderator" ${user.role === 'moderator' ? 'selected' : ''}>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
                    <option value="admin" ${user.role === 'admin' ? 'selected' : ''}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
            `);
        } else {
            actions.push(`<span class="text-success font-weight-bold">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>`);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions.push(`
            <button class="btn btn-sm btn-info" onclick="UsersModule.viewUserDetails('${user.user_id}')">
                –ü–æ–¥—Ä–æ–±–Ω–æ
            </button>
        `);
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
        if (user.role !== 'admin') {
            actions.push(`
                <button class="btn btn-sm btn-warning" onclick="UsersModule.resetUserStats('${user.user_id}')">
                    –°–±—Ä–æ—Å–∏—Ç—å
                </button>
            `);
        }
        
        return actions.join('');
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserRole(userId, newRole) {
        if (!confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "${this.getRoleText(newRole)}"?`)) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            this.renderUsers();
            return;
        }
        
        try {
            await UsersAPI.updateRole(userId, newRole);
            this.showNotification('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
            this.loadUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏', 'error');
            this.renderUsers(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        }
    },
    
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    viewUserDetails(userId) {
        const user = this.users.find(u => u.user_id === userId);
        if (!user) return;
        
        const modalContent = `
            <div class="user-details">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
                
                <div class="detail-row">
                    <strong>ID:</strong> ${user.user_id}
                </div>
                
                <div class="detail-row">
                    <strong>–ò–º—è:</strong> ${this.escapeHtml(user.first_name || '')} ${this.escapeHtml(user.last_name || '')}
                </div>
                
                <div class="detail-row">
                    <strong>Username:</strong> @${this.escapeHtml(user.username || '–ù–µ —É–∫–∞–∑–∞–Ω')}
                </div>
                
                <div class="detail-row">
                    <strong>–†–æ–ª—å:</strong> ${this.getRoleText(user.role)}
                </div>
                
                <div class="detail-row">
                    <strong>–û—á–∫–∏:</strong> ${user.points || 0}
                </div>
                
                <div class="detail-row">
                    <strong>–ë–∞–ª–∞–Ω—Å:</strong> ${user.balance || 0}
                </div>
                
                <div class="detail-row">
                    <strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${this.formatDate(user.created_at)}
                </div>
                
                ${user.is_from_configured_chat ? '<div class="detail-row"><strong>–°—Ç–∞—Ç—É—Å:</strong> –ò–∑ —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞</div>' : ''}
            </div>
        `;
        
        this.showInfoModal('–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', modalContent);
    },
    
    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async resetUserStats(userId) {
        if (!confirm('–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–∫–∏ –∏ –±–∞–ª–∞–Ω—Å)?')) return;
        
        try {
            // –≠—Ç–æ—Ç API endpoint –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await UsersAPI.resetStats(userId);
            this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω–∞', 'success');
            this.loadUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
        }
    },
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    openAddUserModal() {
        const modalContent = `
            <form id="addUserForm" onsubmit="UsersModule.handleAddUser(event)">
                <div class="form-group">
                    <label class="form-label">Telegram ID</label>
                    <input type="text" name="userId" class="form-input" required 
                           placeholder="–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                </div>
                
                <div class="form-group">
                    <label class="form-label">–ò–º—è</label>
                    <input type="text" name="firstName" class="form-input" 
                           placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                </div>
                
                <div class="form-group">
                    <label class="form-label">–§–∞–º–∏–ª–∏—è</label>
                    <input type="text" name="lastName" class="form-input" 
                           placeholder="–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Username</label>
                    <input type="text" name="username" class="form-input" 
                           placeholder="–ë–µ–∑ —Å–∏–º–≤–æ–ª–∞ @">
                </div>
                
                <div class="form-group">
                    <label class="form-label">–†–æ–ª—å</label>
                    <select name="role" class="form-select">
                        <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                        <option value="moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
                        <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="UsersModule.hideModal('userModal')">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" class="btn btn-primary">
                        –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    </button>
                </div>
            </form>
        `;
        
        this.showModal('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', modalContent, 'userModal');
    },
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async handleAddUser(event) {
        event.preventDefault();
        
        const formData = new FormData(event.target);
        const userData = {
            userId: formData.get('userId'),
            firstName: formData.get('firstName'),
            lastName: formData.get('lastName'),
            username: formData.get('username'),
            role: formData.get('role')
        };
        
        try {
            // –≠—Ç–æ—Ç API endpoint –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await UsersAPI.create(userData);
            this.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            this.hideModal('userModal');
            this.loadUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    },
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    searchUsers(query) {
        const filteredUsers = this.users.filter(user => {
            const searchText = `${user.first_name} ${user.last_name} ${user.username}`.toLowerCase();
            return searchText.includes(query.toLowerCase());
        });
        
        this.renderFilteredUsers(filteredUsers);
    },
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    renderFilteredUsers(users) {
        const container = document.getElementById('usersList');
        if (!container) return;
        
        if (users.length === 0) {
            container.innerHTML = `
                <div class="text-center p-5 text-light">
                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = users.map(user => this.renderUserCard(user)).join('');
    },
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getRoleClass(role) {
        const classes = {
            'user': 'text-secondary',
            'moderator': 'text-warning',
            'admin': 'text-danger'
        };
        return classes[role] || 'text-secondary';
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
    getChatTypeText(type) {
        const types = {
            'private': 'üë§ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç',
            'group': 'üë• –ì—Ä—É–ø–ø–∞', 
            'supergroup': 'üè¢ –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞',
            'channel': 'üì¢ –ö–∞–Ω–∞–ª'
        };
        return types[type] || `‚ùì ${type}`;
    },
    
    getRoleText(role) {
        const texts = {
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        };
        return texts[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    },
    
    getUserInitials(firstName, lastName) {
        const first = (firstName || '').charAt(0).toUpperCase();
        const last = (lastName || '').charAt(0).toUpperCase();
        return first + last || '??';
    },
    
    formatDate(dateString) {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch {
            return dateString;
        }
    },
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    // UI —É—Ç–∏–ª–∏—Ç—ã
    showModal(title, content, modalId = 'userModal') {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let modal = document.getElementById(modalId);
        if (!modal) {
            modal = document.createElement('div');
            modal.id = modalId;
            modal.className = 'modal';
            document.body.appendChild(modal);
        }
        
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">${title}</h3>
                    <button class="close-btn" onclick="UsersModule.hideModal('${modalId}')">&times;</button>
                </div>
                <div class="modal-body">
                    ${content}
                </div>
            </div>
        `;
        
        modal.classList.add('show');
    },
    
    showInfoModal(title, content) {
        this.showModal(title, content + `
            <div class="form-actions">
                <button class="btn btn-primary" onclick="UsersModule.hideModal('userModal')">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `);
    },
    
    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('show');
        }
    },
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        alert(message);
        // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
};