/**
 * –ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞, —á–∞—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã
 */

const SettingsModule = {
    settings: {},
    botConnectionStatus: {
        isConnected: false,
        isChecking: false,
        lastCheck: null,
        botInfo: null,
        error: null
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    init() {
        this.bindEvents();
        this.loadSettings();
        this.startBotMonitoring();
    },
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
        const saveChatBtn = document.getElementById('saveChatIdBtn');
        if (saveChatBtn) {
            saveChatBtn.addEventListener('click', () => this.saveWorkChatId());
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞
        const checkChatBtn = document.getElementById('checkChatBtn');
        if (checkChatBtn) {
            checkChatBtn.addEventListener('click', () => this.checkWorkChatId());
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        const saveBotTokenBtn = document.getElementById('saveBotTokenBtn');
        if (saveBotTokenBtn) {
            saveBotTokenBtn.addEventListener('click', () => this.saveBotToken());
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        const checkBotBtn = document.getElementById('checkBotStatusBtn');
        if (checkBotBtn) {
            checkBotBtn.addEventListener('click', () => this.checkBotStatus());
        }
        
        // –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const testNotificationsBtn = document.getElementById('testNotificationsBtn');
        if (testNotificationsBtn) {
            testNotificationsBtn.addEventListener('click', () => this.testNotifications());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
        const connectBotBtn = document.getElementById('connectBotBtn');
        if (connectBotBtn) {
            connectBotBtn.addEventListener('click', () => this.connectToBot());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
        const disconnectBotBtn = document.getElementById('disconnectBotBtn');
        if (disconnectBotBtn) {
            disconnectBotBtn.addEventListener('click', () => this.disconnectBot());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        const restartBotBtn = document.getElementById('restartBotBtn');
        if (restartBotBtn) {
            restartBotBtn.addEventListener('click', () => this.restartBot());
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async loadSettings() {
        try {
            this.settings = await SettingsAPI.getAll();
            this.displaySettings();
            this.checkBotStatus(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    },
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–æ—Ä–º–µ
    displaySettings() {
        // ID —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
        const workChatInput = document.getElementById('workChatId');
        if (workChatInput && this.settings.work_chat_id) {
            workChatInput.value = this.settings.work_chat_id.value || '';
        }
        
        // –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        const botTokenInput = document.getElementById('botToken');
        if (botTokenInput) {
            botTokenInput.value = '';
            botTokenInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞';
            botTokenInput.dataset.hasToken = this.settings.bot_token ? 'true' : 'false';
        }
        
        // –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.displayOtherSettings();
    },
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    displayOtherSettings() {
        const container = document.getElementById('otherSettings');
        if (!container) return;
        
        const otherSettings = Object.keys(this.settings)
            .filter(key => !['work_chat_id', 'bot_token'].includes(key))
            .map(key => ({
                key,
                ...this.settings[key]
            }));
        
        if (otherSettings.length === 0) {
            container.innerHTML = '<p class="text-light">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç</p>';
            return;
        }
        
        container.innerHTML = otherSettings.map(setting => `
            <div class="setting-item">
                <div class="setting-info">
                    <strong>${this.escapeHtml(setting.key)}</strong>
                    <p class="setting-description">${this.escapeHtml(setting.description || '')}</p>
                </div>
                <div class="setting-value">
                    <input type="text" 
                           class="form-input" 
                           value="${this.escapeHtml(setting.value || '')}"
                           onchange="SettingsModule.updateSetting('${setting.key}', this.value)">
                </div>
            </div>
        `).join('');
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
    async saveWorkChatId() {
        const input = document.getElementById('workChatId');
        if (!input) {
            this.showNotification('–ü–æ–ª–µ ID —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }
        
        const chatId = input.value.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω –ª–∏ ID —á–∞—Ç–∞
        if (!chatId) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞', 'warning');
            input.focus();
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è ID —á–∞—Ç–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å - –¥–ª—è –≥—Ä—É–ø–ø –∏–ª–∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤)
        if (!chatId.match(/^-?\d+$/)) {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)', 'error');
            input.focus();
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = document.getElementById('saveChatIdBtn');
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        }
        
        try {
            await SettingsAPI.save('work_chat_id', chatId);
            this.showNotification('ID —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await this.loadSettings();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setTimeout(() => this.checkWorkChatId(), 1000);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–∞: ' + error.message, 'error');
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
            }
        }
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
    async checkWorkChatId() {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const checkBtn = document.getElementById('checkChatBtn');
        if (checkBtn) {
            checkBtn.disabled = true;
            checkBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
        }
        
        try {
            const chatInfo = await SettingsAPI.getChatInfo();
            
            const statusElement = document.getElementById('chatStatus');
            const infoElement = document.getElementById('chatInfo');
            
            if (statusElement) {
                statusElement.innerHTML = `
                    <span class="text-success">‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ "${this.escapeHtml(chatInfo.chat.title)}"</span>
                `;
            }
            
            if (infoElement) {
                infoElement.innerHTML = `
                    <div class="chat-info-card">
                        <div class="d-flex align-center gap-3 mb-3">
                            <div class="chat-avatar">üí¨</div>
                            <div>
                                <h4 class="mb-1">${this.escapeHtml(chatInfo.chat.title)}</h4>
                                <p class="text-light mb-0">ID: ${chatInfo.chat.id}</p>
                            </div>
                        </div>
                        
                        <div class="chat-details">
                            <div class="detail-row">
                                <strong>–¢–∏–ø —á–∞—Ç–∞:</strong> ${this.getChatTypeText(chatInfo.chat.type)}
                            </div>
                            <div class="detail-row">
                                <strong>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> ${chatInfo.chat.members_count}
                            </div>
                            ${chatInfo.chat.description ? `
                                <div class="detail-row">
                                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${this.escapeHtml(chatInfo.chat.description)}
                                </div>
                            ` : ''}
                            <div class="detail-row">
                                <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</strong> 
                                <span class="text-light">${this.formatTime(new Date())}</span>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            this.showNotification(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É "${chatInfo.chat.title}"`, 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞:', error);
            
            const statusElement = document.getElementById('chatStatus');
            const infoElement = document.getElementById('chatInfo');
            
            if (statusElement) {
                statusElement.innerHTML = `
                    <span class="text-danger">‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</span>
                `;
            }
            
            if (infoElement) {
                infoElement.innerHTML = `
                    <div class="chat-error-card">
                        <div class="d-flex align-center gap-2 mb-2">
                            <span class="text-danger">‚ö†Ô∏è</span>
                            <strong>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É</strong>
                        </div>
                        <p class="text-danger mb-2">${this.escapeHtml(error.message)}</p>
                        <div class="chat-troubleshooting">
                            <p class="text-light mb-2">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
                            <ul class="text-light">
                                <li>–ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞</li>
                                <li>–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç</li>
                                <li>–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ</li>
                                <li>–ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω</li>
                            </ul>
                        </div>
                    </div>
                `;
            }
            
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É: ' + error.message, 'error');
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            if (checkBtn) {
                checkBtn.disabled = false;
                checkBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Ç';
            }
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    async saveBotToken() {
        const input = document.getElementById('botToken');
        if (!input) return;
        
        const token = input.value.trim();
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (token.startsWith('‚Ä¢')) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', 'warning');
            return;
        }
        
        if (!token) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', 'warning');
            return;
        }
        
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram Bot
        if (!token.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞', 'error');
            return;
        }
        
        try {
            await SettingsAPI.save('bot_token', token);
            this.showNotification('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
            this.loadSettings();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setTimeout(() => this.checkBotStatus(), 1000);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', 'error');
        }
    },
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
    startBotMonitoring() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É
        this.checkBotStatus();
        
        // –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (!this.botConnectionStatus.isChecking) {
                this.checkBotStatus();
            }
        }, 30000);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    async checkBotStatus() {
        if (this.botConnectionStatus.isChecking) {
            return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
        
        this.botConnectionStatus.isChecking = true;
        this.updateBotStatusDisplay('checking');
        
        try {
            const status = await BotAPI.getStatus();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.botConnectionStatus.isConnected = status.isRunning;
            this.botConnectionStatus.botInfo = status.botData;
            this.botConnectionStatus.error = status.isRunning ? null : status.error;
            this.botConnectionStatus.lastCheck = new Date();
            
            if (status.isRunning) {
                this.updateBotStatusDisplay('connected', status.botData);
                this.enableBotControls();
            } else {
                this.updateBotStatusDisplay('disconnected', null, status.botInfo || status.error);
                this.disableBotControls();
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
            
            this.botConnectionStatus.isConnected = false;
            this.botConnectionStatus.error = error.message;
            this.botConnectionStatus.lastCheck = new Date();
            
            this.updateBotStatusDisplay('error', null, error.message);
            this.disableBotControls();
        } finally {
            this.botConnectionStatus.isChecking = false;
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    updateBotStatusDisplay(status, botData = null, errorMessage = null) {
        const statusElement = document.getElementById('botStatus');
        const infoElement = document.getElementById('botInfo');
        
        if (statusElement) {
            switch (status) {
                case 'checking':
                    statusElement.innerHTML = '<span class="text-warning">‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</span>';
                    break;
                case 'connected':
                    statusElement.innerHTML = '<span class="text-success">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</span>';
                    break;
                case 'disconnected':
                    statusElement.innerHTML = '<span class="text-danger">‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</span>';
                    break;
                case 'error':
                    statusElement.innerHTML = '<span class="text-danger">‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</span>';
                    break;
            }
        }
        
        if (infoElement) {
            if (status === 'connected' && botData) {
                infoElement.innerHTML = `
                    <div class="bot-info-card">
                        <div class="d-flex align-center gap-3 mb-3">
                            <div class="bot-avatar">ü§ñ</div>
                            <div>
                                <h4 class="mb-1">@${this.escapeHtml(botData.username)}</h4>
                                <p class="text-light mb-0">${this.escapeHtml(botData.first_name)}</p>
                            </div>
                        </div>
                        
                        <div class="bot-details">
                            <div class="detail-row">
                                <strong>ID –±–æ—Ç–∞:</strong> ${botData.id}
                            </div>
                            <div class="detail-row">
                                <strong>–ú–æ–∂–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –≥—Ä—É–ø–ø—ã:</strong> 
                                <span class="${botData.can_join_groups ? 'text-success' : 'text-danger'}">
                                    ${botData.can_join_groups ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
                                </span>
                            </div>
                            <div class="detail-row">
                                <strong>–ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</strong> 
                                <span class="${botData.can_read_all_group_messages ? 'text-success' : 'text-warning'}">
                                    ${botData.can_read_all_group_messages ? '‚úÖ –î–∞' : '‚ö†Ô∏è –ù–µ—Ç'}
                                </span>
                            </div>
                            <div class="detail-row">
                                <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</strong> 
                                <span class="text-light">${this.formatTime(this.botConnectionStatus.lastCheck)}</span>
                            </div>
                        </div>
                        
                        <div id="botActions" class="mt-3">
                            <button id="disconnectBotBtn" class="btn btn-danger btn-sm">–û—Ç–∫–ª—é—á–∏—Ç—å</button>
                            <button id="restartBotBtn" class="btn btn-warning btn-sm">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                            <button id="testNotificationsBtn" class="btn btn-info btn-sm">–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</button>
                        </div>
                    </div>
                `;
            } else if (status === 'error' && errorMessage) {
                infoElement.innerHTML = `
                    <div class="bot-error-card">
                        <div class="d-flex align-center gap-2 mb-2">
                            <span class="text-danger">‚ö†Ô∏è</span>
                            <strong>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</strong>
                        </div>
                        <p class="text-danger mb-2">${this.escapeHtml(errorMessage)}</p>
                        <div class="bot-troubleshooting">
                            <p class="text-light mb-2">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
                            <ul class="text-light">
                                <li>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞</li>
                                <li>–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω</li>
                                <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</li>
                                <li>API Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</li>
                            </ul>
                        </div>
                        
                        <div id="botActions" class="mt-3">
                            <button id="connectBotBtn" class="btn btn-success btn-sm">–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ</button>
                            <button id="checkBotStatusBtn" class="btn btn-secondary btn-sm">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                        </div>
                    </div>
                `;
            } else {
                infoElement.innerHTML = `
                    <div class="bot-disconnected-card">
                        <div class="d-flex align-center gap-2 mb-2">
                            <span class="text-warning">‚ö†Ô∏è</span>
                            <strong>–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</strong>
                        </div>
                        <p class="text-light mb-2">–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç–∞</p>
                        <div class="bot-setup-steps">
                            <p class="text-light mb-2">–®–∞–≥–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</p>
                            <ol class="text-light">
                                <li>–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather</li>
                                <li>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –≤—ã—à–µ</li>
                                <li>–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"</li>
                            </ol>
                        </div>
                        
                        <div id="botActions" class="mt-3">
                            <button id="connectBotBtn" class="btn btn-success btn-sm">–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞</button>
                            <button id="checkBotStatusBtn" class="btn btn-secondary btn-sm">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                        </div>
                    </div>
                `;
            }
        }
        
        // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
        this.rebindBotControlEvents();
    },
    
    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    rebindBotControlEvents() {
        const connectBtn = document.getElementById('connectBotBtn');
        const disconnectBtn = document.getElementById('disconnectBotBtn');
        const restartBtn = document.getElementById('restartBotBtn');
        const testBtn = document.getElementById('testNotificationsBtn');
        const checkBtn = document.getElementById('checkBotStatusBtn');
        
        if (connectBtn) {
            connectBtn.addEventListener('click', () => this.connectToBot());
        }
        if (disconnectBtn) {
            disconnectBtn.addEventListener('click', () => this.disconnectBot());
        }
        if (restartBtn) {
            restartBtn.addEventListener('click', () => this.restartBot());
        }
        if (testBtn) {
            testBtn.addEventListener('click', () => this.testNotifications());
        }
        if (checkBtn) {
            checkBtn.addEventListener('click', () => this.checkBotStatus());
        }
    },
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    async connectToBot() {
        const input = document.getElementById('botToken');
        if (!input) {
            this.showNotification('–ü–æ–ª–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }
        
        const token = input.value.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
        if (!token) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', 'warning');
            input.focus();
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        if (!token.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –§–æ—Ä–º–∞—Ç: 123456789:ABC-DEF1234567890...', 'error');
            input.focus();
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const connectBtn = document.getElementById('connectBotBtn');
        if (connectBtn) {
            connectBtn.disabled = true;
            connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        }
        
        this.updateBotStatusDisplay('checking');
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            await SettingsAPI.save('bot_token', token);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await this.loadSettings();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await this.checkBotStatus();
            
            if (this.botConnectionStatus.isConnected && this.botConnectionStatus.botInfo) {
                const botName = this.botConnectionStatus.botInfo.username 
                    ? `@${this.botConnectionStatus.botInfo.username}` 
                    : this.botConnectionStatus.botInfo.first_name;
                this.showNotification(`–ë–æ—Ç ${botName} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!`, 'success');
                input.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                input.placeholder = '–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω';
            } else {
                this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.', 'error');
                this.updateBotStatusDisplay('error', null, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                input.value = token;
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ' + error.message, 'error');
            this.updateBotStatusDisplay('error', null, error.message);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            input.value = token;
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            if (connectBtn) {
                connectBtn.disabled = false;
                connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞';
            }
        }
    },
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
    async disconnectBot() {
        if (!confirm('–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞? –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã.')) {
            return;
        }
        
        try {
            await BotAPI.stop();
            this.botConnectionStatus.isConnected = false;
            this.updateBotStatusDisplay('disconnected');
            this.showNotification('–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞', 'error');
        }
    },
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async restartBot() {
        if (!confirm('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.')) {
            return;
        }
        
        try {
            this.updateBotStatusDisplay('checking');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            await BotAPI.stop();
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
            await this.connectToBot();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞', 'error');
        }
    },
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    validateBotToken() {
        const input = document.getElementById('botToken');
        if (!input) return false;
        
        const token = input.value.trim();
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        if (!token || token.startsWith('‚Ä¢')) {
            if (this.settings.bot_token && this.settings.bot_token.value) {
                return true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            } else {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', 'warning');
                input.focus();
                input.value = '';
                return false;
            }
        }
        
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram Bot
        if (!token.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –§–æ—Ä–º–∞—Ç: 123456:ABC-DEF...', 'error');
            input.focus();
            return false;
        }
        
        return true;
    },
    
    // –í–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    enableBotControls() {
        const elements = ['testNotificationsBtn', 'disconnectBotBtn', 'restartBotBtn'];
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.disabled = false;
                element.classList.remove('btn-secondary');
            }
        });
    },
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    disableBotControls() {
        const elements = ['testNotificationsBtn', 'disconnectBotBtn', 'restartBotBtn'];
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.disabled = true;
                element.classList.add('btn-secondary');
            }
        });
    },
    
    // –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async testNotifications() {
        if (!this.botConnectionStatus.isConnected) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞', 'warning');
            return;
        }
        
        try {
            const result = await BotAPI.testNotifications();
            this.showNotification('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        }
    },
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime(date) {
        if (!date) return '–ù–∏–∫–æ–≥–¥–∞';
        
        try {
            return new Date(date).toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        } catch {
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
    getChatTypeText(type) {
        const types = {
            'private': 'üë§ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç',
            'group': 'üë• –ì—Ä—É–ø–ø–∞', 
            'supergroup': 'üè¢ –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞',
            'channel': 'üì¢ –ö–∞–Ω–∞–ª'
        };
        return types[type] || `‚ùì ${type}`;
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
    getBotConnectionStatus() {
        return {
            ...this.botConnectionStatus,
            isHealthy: this.botConnectionStatus.isConnected && !this.botConnectionStatus.error
        };
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async updateSetting(key, value) {
        try {
            await SettingsAPI.save(key, value);
            this.showNotification(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${key}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
            this.loadSettings(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        }
    },
    
    // –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    exportSettings() {
        const exportData = {
            settings: this.settings,
            exported_at: new Date().toISOString(),
            version: '1.0'
        };
        
        // –ò—Å–∫–ª—é—á–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (exportData.settings.bot_token) {
            delete exportData.settings.bot_token;
        }
        
        const blob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `task-manager-settings-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    },
    
    // –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async importSettings(file) {
        try {
            const text = await file.text();
            const importData = JSON.parse(text);
            
            if (!importData.settings) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            for (const [key, setting] of Object.entries(importData.settings)) {
                if (key !== 'bot_token') { // –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    await SettingsAPI.save(key, setting.value);
                }
            }
            
            this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
            this.loadSettings();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    },
    
    // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async resetSettings() {
        if (!confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
            return;
        }
        
        try {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö
            const keysToReset = Object.keys(this.settings).filter(key => 
                !['bot_token', 'work_chat_id'].includes(key)
            );
            
            for (const key of keysToReset) {
                await SettingsAPI.save(key, '');
            }
            
            this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
            this.loadSettings();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    },
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        const existingNotifications = document.querySelectorAll(`.notification-${type}`);
        existingNotifications.forEach(notif => {
            if (notif.parentNode) {
                notif.parentNode.removeChild(notif);
            }
        });
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå', 
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        };
        
        notification.innerHTML = `
            <span class="notification-icon">${icons[type] || icons.info}</span>
            <span class="notification-message">${this.escapeHtml(message)}</span>
            <button class="notification-close">&times;</button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            min-width: 300px;
            max-width: 500px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            transform: translateX(100%);
        `;
        
        // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const colors = {
            'success': '#48bb78',
            'error': '#f56565',
            'warning': '#ed8936',
            'info': '#4299e1'
        };
        notification.style.backgroundColor = colors[type] || colors.info;
        
        // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.notification-close');
        if (closeBtn) {
            closeBtn.style.cssText = `
                background: none;
                border: none;
                color: white;
                font-size: 18px;
                cursor: pointer;
                padding: 0;
                margin-left: auto;
                opacity: 0.8;
            `;
            closeBtn.addEventListener('click', () => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            });
            closeBtn.addEventListener('mouseenter', () => closeBtn.style.opacity = '1');
            closeBtn.addEventListener('mouseleave', () => closeBtn.style.opacity = '0.8');
        }
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            notification.style.transform = 'translateX(0)';
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        const hideTimeout = setTimeout(() => {
            if (notification.parentNode) {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, 4000);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        notification.hideTimeout = hideTimeout;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`[SETTINGS ${type.toUpperCase()}] ${message}`);
    }
};