const TelegramBot = require('node-telegram-bot-api');
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π unified database interface
const { createDatabase } = require('./src/database');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let db;
try {
    db = createDatabase();
    console.log('ü§ñ Bot: Unified database interface initialized');
} catch (error) {
    console.error('‚ùå Bot: Database initialization failed:', error);
    process.exit(1);
}

class TaskBot {
    constructor(token) {
        this.bot = new TelegramBot(token, { polling: true });
        this.setupCommands();
        this.setupCallbacks();
    }

    setupCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        this.bot.onText(/\/task (.+)/, async (msg, match) => {
            try {
                await this.handleTaskCommand(msg, match[1]);
            } catch (error) {
                console.error('Error handling task command:', error);
                this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
        this.bot.onText(/\/tasks/, async (msg) => {
            try {
                await this.handleTasksCommand(msg);
            } catch (error) {
                console.error('Error handling tasks command:', error);
                this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ start - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
        this.bot.onText(/\/start/, async (msg) => {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
                    await db.addGroup(msg.chat.id.toString(), msg.chat.title || 'Unknown Group');
                }
                
                await db.addUser(
                    msg.from.id.toString(),
                    msg.from.username,
                    msg.from.first_name,
                    msg.from.last_name
                );

                const welcomeText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!

ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–æ–≤—ã—à–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã.

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/task <–∑–∞–¥–∞—á–∞> @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å <–æ–ø–∏—Å–∞–Ω–∏–µ> <–¥–µ–¥–ª–∞–π–Ω>
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏  
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

*–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
\`/task –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω @anna_designer –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2025-06-15\`

‚ú® –ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏!`;

                this.bot.sendMessage(msg.chat.id, welcomeText, { 
                    reply_to_message_id: msg.message_id,
                    parse_mode: 'Markdown'
                });
            } catch (error) {
                console.error('Error handling start command:', error);
                this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        this.bot.onText(/\/help/, async (msg) => {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ help
                await db.addUser(
                    msg.from.id.toString(),
                    msg.from.username,
                    msg.from.first_name,
                    msg.from.last_name
                );

                const helpText = `
ü§ñ *–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
/task <–∑–∞–¥–∞—á–∞> @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å <–æ–ø–∏—Å–∞–Ω–∏–µ> <–¥–µ–¥–ª–∞–π–Ω> [–≤—Ä–µ–º—è]
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
\`/task –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω @anna_designer –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2025-06-15\`
\`/task –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ @dev_alex –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π 2025-06-15 18:00\`

*–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /task:*
- –ó–∞–¥–∞—á–∞: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
- @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –î–µ–¥–ª–∞–π–Ω: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –í—Ä–µ–º—è: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            `;
            
            this.bot.sendMessage(msg.chat.id, helpText, { 
                reply_to_message_id: msg.message_id 
            });
            } catch (error) {
                console.error('Error handling help command:', error);
                this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É
        this.bot.on('new_chat_members', async (msg) => {
            if (msg.new_chat_members.some(member => member.id === this.bot.options.id)) {
                await this.handleBotAddedToGroup(msg);
            }
        });
    }

    setupCallbacks() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        this.bot.on('callback_query', async (callbackQuery) => {
            const action = callbackQuery.data;
            const msg = callbackQuery.message;

            try {
                if (action.startsWith('complete_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleCompleteTask(callbackQuery, taskId);
                } else if (action.startsWith('delete_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleDeleteTask(callbackQuery, taskId);
                } else if (action.startsWith('submit_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleSubmitForReview(callbackQuery, taskId);
                } else if (action.startsWith('approve_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleApproveTask(callbackQuery, taskId);
                } else if (action.startsWith('revision_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleRequestRevision(callbackQuery, taskId);
                } else if (action.startsWith('return_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleReturnToWork(callbackQuery, taskId);
                } else if (action.startsWith('resubmit_')) {
                    const taskId = parseInt(action.split('_')[1]);
                    await this.handleResubmitTask(callbackQuery, taskId);
                } else if (action === 'refresh_tasks') {
                    await this.handleRefreshTasks(callbackQuery);
                } else {
                    console.log('Unknown callback action:', action);
                    this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
                }
            } catch (error) {
                console.error('Error handling callback:', error);
                this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
            }
        });
    }

    async handleTaskCommand(msg, taskText) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
            await db.addGroup(msg.chat.id.toString(), msg.chat.title || 'Unknown Group');
        }
        
        await db.addUser(
            msg.from.id.toString(),
            msg.from.username,
            msg.from.first_name,
            msg.from.last_name
        );

        // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        const parsed = this.parseTaskCommand(taskText);
        
        if (!parsed.title || !parsed.assignee) {
            this.bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
/task <–∑–∞–¥–∞—á–∞> @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å <–æ–ø–∏—Å–∞–Ω–∏–µ> <–¥–µ–¥–ª–∞–π–Ω>

–ü—Ä–∏–º–µ—Ä:
/task –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω @anna_designer –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2025-06-15`, { 
                reply_to_message_id: msg.message_id 
            });
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        const taskId = await db.addTask(
            parsed.title,
            parsed.description,
            parsed.assignee,
            parsed.deadline,
            msg.chat.id.toString(),
            msg.from.id.toString()
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const creatorName = msg.from.first_name + (msg.from.last_name ? ` ${msg.from.last_name}` : '');
        let deadlineText = '';
        if (parsed.deadline) {
            try {
                // –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –∫—Ä–∞—Å–∏–≤–æ
                if (parsed.deadline.includes(' ')) {
                    const [date, time] = parsed.deadline.split(' ');
                    deadlineText = `üìÖ –î–µ–¥–ª–∞–π–Ω: ${date} –≤ ${time}`;
                } else {
                    deadlineText = `üìÖ –î–µ–¥–ª–∞–π–Ω: ${parsed.deadline}`;
                }
            } catch (e) {
                deadlineText = `üìÖ –î–µ–¥–ª–∞–π–Ω: ${parsed.deadline}`;
            }
        }
        
        const response = `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!

üìã –ó–∞–¥–∞—á–∞: ${parsed.title}
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${parsed.assignee}
üë®‚Äçüíº –°–æ–∑–¥–∞–ª: ${creatorName}
${parsed.description ? `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${parsed.description}` : ''}
${deadlineText}

ID –∑–∞–¥–∞—á–∏: #${taskId}`;

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á–∏
        const keyboard = await this.getTaskKeyboard(taskId, msg.from.id, parsed.assignee, msg.chat.id, 'pending');

        const messageOptions = {
            reply_to_message_id: msg.message_id
        };

        if (keyboard) {
            messageOptions.reply_markup = keyboard;
        }

        this.bot.sendMessage(msg.chat.id, response, messageOptions);
    }

    async handleTasksCommand(msg) {
        const chatId = msg.chat.id.toString();
        const tasks = await db.getAllTasks({ chatId });

        if (tasks.length === 0) {
            this.bot.sendMessage(msg.chat.id, `üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç

–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π:
/task <–∑–∞–¥–∞—á–∞> @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å <–æ–ø–∏—Å–∞–Ω–∏–µ> <–¥–µ–¥–ª–∞–π–Ω>`, { 
                reply_to_message_id: msg.message_id 
            });
            return;
        }

        let response = 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n';
        
        const pendingTasks = tasks.filter(t => t.status === 'pending');
        const completedTasks = tasks.filter(t => t.status === 'completed');

        if (pendingTasks.length > 0) {
            response += 'üîÑ –í —Ä–∞–±–æ—Ç–µ:\n';
            pendingTasks.forEach(task => {
                let deadlineText = '';
                if (task.deadline) {
                    if (task.deadline.includes(' ')) {
                        const [date, time] = task.deadline.split(' ');
                        deadlineText = ` (–¥–æ ${date} –≤ ${time})`;
                    } else {
                        deadlineText = ` (–¥–æ ${task.deadline})`;
                    }
                }
                const isOverdue = task.deadline && new Date(task.deadline) < new Date() ? ' ‚ö†Ô∏è' : '';
                response += `#${task.id} ${task.title} ‚Üí ${task.assignee_username}${deadlineText}${isOverdue}\n`;
            });
            response += '\n';
        }

        const reviewTasks = tasks.filter(t => t.status === 'review');
        if (reviewTasks.length > 0) {
            response += 'üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n';
            reviewTasks.forEach(task => {
                response += `#${task.id} ${task.title} ‚Üí ${task.assignee_username}\n`;
            });
            response += '\n';
        }

        const revisionTasks = tasks.filter(t => t.status === 'revision');
        if (revisionTasks.length > 0) {
            response += 'üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ:\n';
            revisionTasks.forEach(task => {
                const comment = task.review_comment ? ` (${task.review_comment})` : '';
                response += `#${task.id} ${task.title} ‚Üí ${task.assignee_username}${comment}\n`;
            });
            response += '\n';
        }

        if (completedTasks.length > 0) {
            response += '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:\n';
            completedTasks.slice(0, 5).forEach(task => {
                response += `#${task.id} ${task.title} ‚Üí ${task.assignee_username}\n`;
            });
            if (completedTasks.length > 5) {
                response += `... –∏ –µ—â–µ ${completedTasks.length - 5} –∑–∞–¥–∞—á\n`;
            }
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_tasks' }]
            ]
        };

        this.bot.sendMessage(msg.chat.id, response, {
            reply_markup: keyboard,
            reply_to_message_id: msg.message_id
        });
    }

    async handleCompleteTask(callbackQuery, taskId) {
        const result = await db.completeTask(taskId);
        
        if (result > 0) {
            this.bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const newText = callbackQuery.message.text.replace(/üìã –ó–∞–¥–∞—á–∞:/, '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:');
            this.bot.editMessageText(newText, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
        } else {
            this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    async handleDeleteTask(callbackQuery, taskId) {
        const result = await db.deleteTask(taskId);
        
        if (result > 0) {
            this.bot.answerCallbackQuery(callbackQuery.id, 'üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
            this.bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id);
        } else {
            this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    async handleRefreshTasks(callbackQuery) {
        this.bot.answerCallbackQuery(callbackQuery.id, 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è handleTasksCommand
        const msg = {
            chat: callbackQuery.message.chat,
            message_id: callbackQuery.message.message_id
        };
        
        await this.handleTasksCommand(msg);
        this.bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id);
    }

    async handleBotAddedToGroup(msg) {
        const welcomeText = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/task <–∑–∞–¥–∞—á–∞> @–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å <–æ–ø–∏—Å–∞–Ω–∏–µ> <–¥–µ–¥–ª–∞–π–Ω>
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/help - –ø–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏!`;

        this.bot.sendMessage(msg.chat.id, welcomeText);
    }

    async getUserRoleAndValidateChat(userId, chatId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
            const workChatSetting = await db.getSetting('work_chat_id');
            const workChatId = workChatSetting ? workChatSetting.value : null;
            if (workChatId && workChatId !== chatId.toString()) {
                console.log(`Chat ${chatId} is not the work chat (${workChatId})`);
                return { role: null, isWorkChat: false };
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            const role = await db.getUserRole(userId.toString());
            return { role, isWorkChat: true };
        } catch (error) {
            console.error('Error checking user role:', error);
            return { role: 'executor', isWorkChat: true }; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        }
    }

    async getTaskKeyboard(taskId, currentUserId, assigneeUsername, chatId, status) {
        const { role, isWorkChat } = await this.getUserRoleAndValidateChat(currentUserId, chatId);
        
        if (!isWorkChat) {
            console.log('Not in work chat, no buttons shown');
            return null;
        }
        
        const canManage = role === 'admin' || role === 'manager';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        let currentUser;
        try {
            currentUser = await this.bot.getChatMember(chatId, currentUserId);
        } catch (error) {
            console.error('Error getting user info:', error);
            return null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        const currentUsername = currentUser?.user?.username;
        if (!currentUsername) {
            console.log('No username found for user:', currentUserId);
            return null;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const normalizedCurrentUsername = currentUsername.replace('@', '').toLowerCase();
        const normalizedAssigneeUsername = assigneeUsername.replace('@', '').toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const isAssignee = normalizedCurrentUsername === normalizedAssigneeUsername ||
                          currentUsername === assigneeUsername ||
                          `@${currentUsername}` === assigneeUsername ||
                          currentUsername === assigneeUsername.replace('@', '');
        
        console.log(`Debug: currentUserId=${currentUserId}, currentUsername=${currentUsername}, assigneeUsername=${assigneeUsername}, normalizedCurrent=${normalizedCurrentUsername}, normalizedAssignee=${normalizedAssigneeUsername}, isAssignee=${isAssignee}, role=${role}, canManage=${canManage}, status=${status}`);
        
        let buttons = [];

        if (status === 'pending') {
            // –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–µ–ª–∞–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            buttons.push({ text: 'üì§ –°–¥–∞—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', callback_data: `submit_${taskId}` });
            console.log(`Added submit button for pending task: isAssignee=${isAssignee}, role=${role}`);
        } else if (status === 'review') {
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        } else if (status === 'revision') {
            if (isAssignee) {
                buttons.push({ text: 'üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data: `return_${taskId}` });
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
        if (buttons.length === 0) {
            return null;
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2
        const keyboard = { inline_keyboard: [] };
        for (let i = 0; i < buttons.length; i += 2) {
            keyboard.inline_keyboard.push(buttons.slice(i, i + 2));
        }

        return keyboard;
    }

    async handleSubmitForReview(callbackQuery, taskId) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        const tasks = await db.getAllTasks({ chatId: callbackQuery.message.chat.id.toString() });
        const task = tasks.find(t => t.id === taskId);
        
        if (!task) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        let currentUser;
        try {
            currentUser = await this.bot.getChatMember(callbackQuery.message.chat.id, callbackQuery.from.id);
        } catch (error) {
            console.error('Error getting user info:', error);
        }
        
        const currentUsername = currentUser?.user?.username;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á—Ç–æ –∏ –≤ getTaskKeyboard
        const normalizedCurrentUsername = currentUsername ? currentUsername.replace('@', '').toLowerCase() : '';
        const normalizedAssigneeUsername = task.assignee_username.replace('@', '').toLowerCase();
        
        const isAssignee = normalizedCurrentUsername === normalizedAssigneeUsername ||
                          currentUsername === task.assignee_username ||
                          `@${currentUsername}` === task.assignee_username ||
                          currentUsername === task.assignee_username.replace('@', '');

        if (!isAssignee) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
            return;
        }

        const result = await db.submitForReview(taskId, callbackQuery.from.id);
        
        if (result > 0) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: 'üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
            
            const newText = callbackQuery.message.text.replace('üìã –ó–∞–¥–∞—á–∞:', 'üîç –ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:');
            
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
            this.bot.editMessageText(newText, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
        } else {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
        }
    }

    async handleApproveTask(callbackQuery, taskId) {
        const { role, isWorkChat } = await this.getUserRoleAndValidateChat(callbackQuery.from.id, callbackQuery.message.chat.id);
        
        if (!isWorkChat || (role !== 'admin' && role !== 'manager')) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞—á–∏' });
            return;
        }

        const result = await db.approveTask(taskId, callbackQuery.from.id);
        
        if (result > 0) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!' });
            
            const newText = callbackQuery.message.text.replace(/üîç –ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:|üìã –ó–∞–¥–∞—á–∞:/, '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:');
            this.bot.editMessageText(newText, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            });
        } else {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
    }

    async handleRequestRevision(callbackQuery, taskId) {
        const { role, isWorkChat } = await this.getUserRoleAndValidateChat(callbackQuery.from.id, callbackQuery.message.chat.id);
        
        if (!isWorkChat || (role !== 'admin' && role !== 'manager')) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É' });
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏
        this.bot.answerCallbackQuery(callbackQuery.id, { text: 'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏...' });
        
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const commentHandler = async (msg) => {
            if (msg.chat.id === chatId && msg.reply_to_message && msg.reply_to_message.message_id === messageId) {
                const comment = msg.text;
                
                const result = await db.requestRevision(taskId, callbackQuery.from.id, comment);
                
                if (result > 0) {
                    const newText = callbackQuery.message.text.replace('üîç –ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:', 'üîÑ –ó–∞–¥–∞—á–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ:') + `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    const tasks = await db.getAllTasks({ chatId: chatId.toString() });
                    const task = tasks.find(t => t.id === taskId);
                    const assigneeUsername = task ? task.assignee_username : '';
                    
                    const newKeyboard = await this.getTaskKeyboard(taskId, callbackQuery.from.id, assigneeUsername, chatId, 'revision');
                    
                    const editOptions = {
                        chat_id: chatId,
                        message_id: messageId
                    };

                    if (newKeyboard) {
                        editOptions.reply_markup = newKeyboard;
                    }

                    this.bot.editMessageText(newText, editOptions);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    this.sendRejectionNotification(task, comment, chatId);
                }
                
                // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                this.bot.removeListener('message', commentHandler);
            }
        };

        this.bot.on('message', commentHandler);
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
        setTimeout(() => {
            this.bot.removeListener('message', commentHandler);
        }, 5 * 60 * 1000);
    }

    async sendRejectionNotification(task, reason, chatId) {
        try {
            const message = `üîÑ –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É

üìã –ó–∞–¥–∞—á–∞: ${task.title}
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee_username}
üí¨ –ü—Ä–∏—á–∏–Ω–∞: ${reason}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–±–æ—Ç–æ–∫: ${(task.revision_count || 0) + 1}

‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.`;

            // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            const keyboard = {
                inline_keyboard: [[
                    { text: 'üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data: `return_${task.id}` }
                ]]
            };

            this.bot.sendMessage(chatId, message, {
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Error sending rejection notification:', error);
        }
    }

    async handleReturnToWork(callbackQuery, taskId) {
        const result = await db.returnToWork(taskId);
        
        if (result > 0) {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: 'üîÑ –ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É' });
            
            const newText = callbackQuery.message.text.replace('üîÑ –ó–∞–¥–∞—á–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ:', 'üìã –ó–∞–¥–∞—á–∞:').split('\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')[0];
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const tasks = await db.getAllTasks({ chatId: callbackQuery.message.chat.id.toString() });
            const task = tasks.find(t => t.id === taskId);
            const assigneeUsername = task ? task.assignee_username : '';
            
            const newKeyboard = await this.getTaskKeyboard(taskId, callbackQuery.from.id, assigneeUsername, callbackQuery.message.chat.id, 'pending');
            
            const editOptions = {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id
            };

            if (newKeyboard) {
                editOptions.reply_markup = newKeyboard;
            }

            this.bot.editMessageText(newText, editOptions);
        } else {
            this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ —Ä–∞–±–æ—Ç—É' });
        }
    }

    async handleResubmitTask(callbackQuery, taskId) {
        // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ submit for review
        await this.handleSubmitForReview(callbackQuery, taskId);
    }

    parseTaskCommand(text) {
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /task
        // –§–æ—Ä–º–∞—Ç: /task –ó–∞–≥–æ–ª–æ–≤–æ–∫ @username –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω
        const parts = text.trim().split(' ');
        let title = '';
        let assignee = '';
        let description = '';
        let deadline = '';
        
        let currentPart = 'title';
        
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            
            if (part.startsWith('@')) {
                // –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
                assignee = part;
                currentPart = 'description';
            } else if (part.match(/^\d{4}-\d{2}-\d{2}$/)) {
                // –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ - —ç—Ç–æ –¥–µ–¥–ª–∞–π–Ω
                deadline = part;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –Ω–∞ –≤—Ä–µ–º—è
                if (i + 1 < parts.length && parts[i + 1].match(/^\d{1,2}:\d{2}$/)) {
                    deadline += ' ' + parts[i + 1];
                    i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                }
                currentPart = 'done';
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                if (currentPart === 'title') {
                    title += (title ? ' ' : '') + part;
                } else if (currentPart === 'description') {
                    description += (description ? ' ' : '') + part;
                }
            }
        }
        
        return {
            title: title.trim(),
            assignee: assignee,
            description: description.trim(),
            deadline: deadline
        };
    }
}

module.exports = TaskBot;